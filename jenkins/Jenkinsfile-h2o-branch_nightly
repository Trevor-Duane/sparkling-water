#!/usr/bin/groovy
@Library('test-shared-library') _

// Job parameters
properties(
        [
                parameters(
                        [
                                string(name: 'h2oBranch', defaultValue: 'master', description: 'H2O branch to build against if buildAgainstH2OBranch is set to true'),
                        ]
                ),
                buildDiscarder(logRotator(numToKeepStr: '10'))
        ]
)


node('docker && micro') {
    docker.withRegistry("https://docker.h2o.ai") {
        // Clean workspace
        sh 'rm -rf *'
        // Get Sparkling Water and save the scm environment variables
        checkout scm
        // Get the script with the pipeline
        def pipeline = load 'jenkins/sparklingWaterPipeline.groovy'

        // Execute the pipeline
        pipeline(params) { p ->
            sparkVersion = "2.3.2"
            runUnitTests = "false"
            runPyUnitTests = "false"
            runRUnitTests = "false"
            runLocalIntegTests = "false"
            runLocalPyIntegTests = "false"
            runScriptTests = "false"
            runIntegTests = "false"
            runPySparklingIntegTests = "false"
            sparklingTestEnv = "yarn"
            buildAgainstH2OBranch = "true"
            h2oBranch = "${p.h2oBranch}"
            buildAgainstSparkBranch = "false"
            sparkBranch = "master"
            hadoopVersion = "2.7"
            backendMode = "internal"
            hdpVersion = "2.2.6.3-1"
            driverHadoopVersion = "hdp2.2"
            buildNightly = "true"
            uploadNightly = "true"
            dockerVersion = "8"
        }
    }
}
